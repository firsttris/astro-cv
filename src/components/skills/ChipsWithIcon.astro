---
import { Icon } from "astro-icon/components";
import styled from "@emotion/styled";
import { Typography } from "../Typography";
import { type Skill } from "./technologies";
import { getLangFromUrl, useTranslations } from "../../i18n/utils";

interface Props {
  skills: Skill[];
}

interface ChipProps {
  level?: "Beginner" | "Intermediate" | "Expert";
}

// Druckfreundliche Rahmenart fÃ¼r jedes Level
const getBorderForPrint = (level: "Beginner" | "Intermediate" | "Expert") => {
  switch(level) {
    case "Beginner": return "1px solid #c2c2c2"; // Grau wie im Farbverlauf
    case "Intermediate": return "1.5px solid #74adff"; // Blau wie im Farbverlauf
    case "Expert": return "2px solid #ffaa00"; // Gold/Orange wie im Farbverlauf
    default: return "1px solid #999";
  }
};

const FlexWrap = styled.div({
  display: "flex",
  flexWrap: "wrap",
});

const Link = styled.a({
  textDecoration: "none",
  color: "black",
});

const Chip = styled.div<ChipProps>(props => ({
  cursor: "pointer",
  margin: "2px 3px",
  height: "20px",
  background: "white",
  border: props.level ? getBorderForPrint(props.level) : "1px solid black",
  borderRadius: "6px",
  display: "flex",
  alignItems: "center",
  justifyContent: "center",
  gap: "5px",
  padding: "0 8px",
  position: "relative",
  "&:hover": {
    filter: "brightness(1.05)",
    color: "inherit",
  }
}));

const LevelBadge = styled.div({
  fontSize: "10px",
  backgroundColor: "white",
  color: "black",
  borderRadius: "50%",
  width: "14px",
  height: "14px",
  display: "flex",
  alignItems: "center",
  justifyContent: "center",
  border: "1px solid grey",
});

const currentLanguage = getLangFromUrl(Astro.url.pathname);
const isGerman = currentLanguage === "de";

const getSkillLevel = (level: "Beginner" | "Intermediate" | "Expert") => {
  switch(level) {
    case "Beginner": return isGerman ? "A" : "B";
    case "Intermediate": return isGerman ? "F" : "I";
    case "Expert": return "E";
    default: return "";
  }
};

const t = useTranslations(Astro.url.pathname);

const { skills } = Astro.props;
---

<FlexWrap>
  {
    skills.map((skill, index) => (
      <Link key={index} href={skill.website} target="_blank" rel="noopener">
        <Chip level={skill.level}>
          <Icon name={skill.icon} style={{ fontSize: "16px" }} />
          <Typography className="body1" style={{ fontSize: '12px'}}>{skill.name}</Typography>
          <LevelBadge title={t(skill.level)}>{getSkillLevel(skill.level)}</LevelBadge>
        </Chip>
      </Link>
    ))
  }
</FlexWrap>